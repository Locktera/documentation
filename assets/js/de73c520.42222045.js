"use strict";(self.webpackChunklocktera_api_documentation=self.webpackChunklocktera_api_documentation||[]).push([[246],{5941:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"Use Cases/DRM-Rules-Write","title":"Writing DRM Rules","description":"This example uses the Locktera API to read and write the DRM rules for an existing Locktera container.","source":"@site/docs/Use Cases/DRM-Rules-Write.md","sourceDirName":"Use Cases","slug":"/Use Cases/DRM-Rules-Write","permalink":"/documentation/docs/Use Cases/DRM-Rules-Write","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"apiSidebar","previous":{"title":"Getting Started","permalink":"/documentation/docs/Use Cases/All-Use-Cases"},"next":{"title":"Encode A Folder","permalink":"/documentation/docs/Use Cases/Encode-Folder"}}');var i=n(4848),s=n(8453);const a={},o="Writing DRM Rules",c={},l=[{value:"Imports",id:"imports",level:2},{value:"API operations",id:"api-operations",level:2},{value:"get_drm()",id:"get_drm",level:3},{value:"put_drm()",id:"put_drm",level:3},{value:"The CLI",id:"the-cli",level:2}];function d(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"writing-drm-rules",children:"Writing DRM Rules"})}),"\n",(0,i.jsx)(t.p,{children:"This example uses the Locktera API to read and write the DRM rules for an existing Locktera container."}),"\n",(0,i.jsx)(t.p,{children:"A walkthrough of the code follows."}),"\n",(0,i.jsx)(t.h2,{id:"imports",children:"Imports"}),"\n",(0,i.jsx)(t.p,{children:"First we'll import the libraries we'll need."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-typescript",children:"import * as fs from 'node:fs/promises'; // Used to read and write the DRM rules file\n"})}),"\n",(0,i.jsx)(t.p,{children:"We will also need to import libraries specific to the task at hand - interacting with the Locktera API."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-typescript",children:"import { type DynamicDrm } from '../DynamicDrm.ts'; // The definition of Locktera DRM rules\r\nimport { ORG_ID, fetch, verify_identity } from '../fetch.ts'; // Our org ID, authenticated fetch function, and sanity check function\n"})}),"\n",(0,i.jsx)(t.h2,{id:"api-operations",children:"API operations"}),"\n",(0,i.jsxs)(t.p,{children:["We will ",(0,i.jsx)(t.code,{children:"GET"})," and ",(0,i.jsx)(t.code,{children:"PUT"})," the endpoint for a specified container's DRM using the authenticated fetch function."]}),"\n",(0,i.jsx)(t.h3,{id:"get_drm",children:"get_drm()"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-typescript",children:"async function get_drm (container_id: string) {\r\n\treturn await fetch(`/orgs/${ORG_ID}/containers/${container_id}/drm`) as DynamicDrm;\r\n}\n"})}),"\n",(0,i.jsx)(t.h3,{id:"put_drm",children:"put_drm()"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-typescript",children:"async function put_drm (container_id: string, drm: DynamicDrm) {\r\n\tawait fetch(`/orgs/${ORG_ID}/containers/${container_id}/drm`, {\r\n\t\tmethod: 'PUT',\r\n\t\theaders: {\r\n\t\t\t'content-type': 'application/json', // Be sure to set the content type!\r\n\t\t},\r\n\t\tbody: JSON.stringify(drm),\r\n\t});\r\n}\n"})}),"\n",(0,i.jsx)(t.h2,{id:"the-cli",children:"The CLI"}),"\n",(0,i.jsx)(t.p,{children:"We will use command line arguments to specify the action, container ID, and DRM rules file name. First, we will collect and verify the arguments."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-typescript",children:"// Print usage if incorrect\r\nif (process.argv.length !== 4) {\r\n\tconsole.log(`Usage:\r\n\tnpm run drm get $CONTAINER_ID - outputs $CONTAINER_ID's DRM to $CONTAINER_ID.json\r\n\tnpm run drm put $CONTAINER_ID - sets $CONTAINER_ID's DRM from $CONTAINER_ID.json\r\n`);\r\n\tprocess.exit(0);\r\n}\r\n\r\n// Normalize arguments\r\nconst action = process.argv[2].trim().toLowerCase();\r\nconst container_id = process.argv[3].trim().toLowerCase();\r\n\r\n// Verify arguments\r\nif (action !== 'get' && action !== 'put') {\r\n\tthrow new Error('Invalid action; use `get` or `put`');\r\n}\r\n\r\nif (!/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/.test(container_id)) {\r\n\tthrow new Error('Invalid container ID; must be a UUID');\r\n}\r\n\r\nconst file_name = container_id + '.json';\n"})}),"\n",(0,i.jsx)(t.p,{children:"Then we will verify that our Org ID and API key are good by fetching our org information. If either value is bad, this function will throw."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-typescript",children:"await verify_identity();\n"})}),"\n",(0,i.jsx)(t.p,{children:"Finally, we will handle the two possible actions."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-typescript",children:"if (action === 'get') {\r\n\t// Fetch the DRM from the API\r\n\tconst drm = await get_drm(container_id);\r\n\r\n\t// Write it to the output file\r\n\tawait fs.writeFile(file_name, JSON.stringify(drm, null, '\\t'));\r\n\r\n\tconsole.log('Wrote to', file_name);\r\n} else if (action === 'put') {\r\n\t// Read the contents of the input file\r\n\tconst input = await fs.readFile(file_name, 'utf-8');\r\n\r\n\t// Parse it to JSON to ensure it's syntactically valid\r\n\tconst drm: DynamicDrm = JSON.parse(input.trim());\r\n\r\n\t// Update the container's DRM\r\n\tawait put_drm(container_id, drm);\r\n\r\n\tconsole.log('Updated from', file_name);\r\n}\n"})})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>o});var r=n(6540);const i={},s=r.createContext(i);function a(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);